# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ImageRecordModel {
  height: Float!
  width: Float!
  src: String!
  type: String
}

type PostItemCount {
  like: Float
  read: Float
}

type PagerModel {
  total: Float!
  size: Float!
  currentPage: Float!
  totalPage: Float!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
}

type MasterModel {
  _id: ID!
  created: DateTime!
  modified: DateTime!
  token: String!
  name: String!
  username: String!
  url: String
  mail: String
  avatar: String
  expiresIn: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ValidPayloadModel {
  ok: Int!
  isGuest: Boolean!
}

type CategoryItemModel {
  _id: ID!
  created: DateTime!
  modified: DateTime!
  type: CategoryType_!
  children: [PostItemModel!]
  name: String!
  slug: String!
}

enum CategoryType_ {
  Category
  Tag
}

type PostItemModel {
  _id: ID!
  created: DateTime!
  modified: DateTime!
  category: CategoryItemModel!
  count: PostItemCount!
  images: [ImageRecordModel!]
  tags: [String!]
  title: String!
  slug: String!
  text: String!
  allowComment: Boolean!
  categoryId: String!
  commentsIndex: Float!
  copyright: Boolean!
  hide: Boolean!
  summary: String
}

type PostPagerArgs {
  pager: PagerModel!
  data: [PostItemModel!]!
}

type CategoryPagerModel {
  data: [CategoryItemModel!]
}

type NoteItemCount {
  read: Int
  like: Int
}

type NoteItemModel {
  _id: ID!
  commentsIndex: Int
  count: NoteItemCount!
  images: [ImageRecordModel!]
  nid: Int!
  allowComment: Boolean!
  created: DateTime!
  modified: DateTime!
  hide: Boolean!
  mood: String
  weather: String
  text: String!
  title: String!
}

type NoteItemAggregateModel {
  data: NoteItemModel!
  prev: NoteItemModel
  next: NoteItemModel
}

type NotePagerModel {
  data: [NoteItemModel!]!
  pager: PagerModel!
}

type PageItemModel {
  _id: ID!
  created: DateTime!
  modified: DateTime!
  title: String!
  text: String!
  images: [ImageRecordModel!]
  commentsIndex: Int!
  order: Int!
  allowComment: Boolean!
  slug: String!
  subtitle: String
}

type User {
  _id: ID
  created: DateTime
  modified: DateTime
  token: String
  name: String
  username: String
  url: String
  mail: String
  avatar: String
  expiresIn: Float
}

type TopModel {
  notes: [PostItemModel!]
  posts: [PostItemModel!]
}

type AggregateQueryModel {
  user: User!
  lastestNote: NoteItemModel!
  pages: [PageItemModel!]
  top: TopModel!
}

type TimelineModel {
  notes: [NoteItemModel!]
  posts: [PostItemModel!]
}

type Query {
  checkLogged: ValidPayloadModel!
  login(input: LoginDto!): MasterModel!
  getPostById(id: ID!): PostItemModel!
  getPostBySlug(category: String!, slug: String!): PostItemModel!
  getPostsWithPager(sortOrder: SortOrder, size: Float, page: Float, state: Float, sortBy: String, year: Float): PostPagerArgs!
  getCategories(ids: [String!], type: CategoryType, joint: Boolean): CategoryPagerModel!
  getCategoryBySlug(id: String, tag: [Boolean!], slug: String): CategoryItemModel!
  getNoteById(password: String, nid: Int, id: ID): NoteItemAggregateModel!
  getLastestNote: NoteItemAggregateModel!
  getNotesWithPager(sortOrder: SortOrder, size: Float, page: Float, state: Float, sortBy: String, year: Float): NotePagerModel!
  aggregate(size: Int = 6): AggregateQueryModel!
  getTimeline(sort: Int = 1, year: Float): TimelineModel!
}

input LoginDto {
  username: String!
  password: String!
}

enum SortOrder {
  DESC
  ASC
}

enum CategoryType {
  Category
  Tag
}
